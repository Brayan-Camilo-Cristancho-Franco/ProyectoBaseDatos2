#EMPRESA
DELIMITER //
CREATE PROCEDURE AgregarEmpresa()
BEGIN
    INSERT INTO EMPRESA (ID, Nit, Nombre, Direccion,Sector, Correo)
    SELECT ID_Empresa, Nit_Empresa,Nombre_Empresa,Direccion_Empresa,Sector_Empresa,Correo_Empresa
    FROM TablaTemporal;
END //

#PROYECTO
DELIMITER //
CREATE PROCEDURE AgregarProyecto()
BEGIN
    INSERT INTO PROYECTO (ID, Nombre, Descripcion, Fecha_Inicio, Fecha_Finalizacion, Id_Empresa_id, Estado)
    SELECT ID_Proyecto, Nombre_Proyecto, Descripcion_Proyecto, Fecha_Inicio_Proyecto, Fecha_Finalizacion_Proyecto, Id_Empresa_Proyecto, Estado_Proyecto
    FROM TablaTemporal;
END //
DELIMITER ;

#METODO_PAGO
DELIMITER //
CREATE PROCEDURE AgregarMetodoPago()
BEGIN
    INSERT INTO METODO_PAGO (ID, Nombre, Descripcion, Estado)
    SELECT ID_M_Pago, Nombre_M_Pago, Descripcion_M_Pago, Estado_M_Pago
    FROM TablaTemporal;
END //
DELIMITER ;

#FACTURA
DELIMITER //
CREATE PROCEDURE AgregarFactura()
BEGIN
    INSERT INTO FACTURA (ID, Fecha_Factura, Valor, Id_M_Pago_id)
    SELECT ID_Factura, Fecha_Factura, Valor_Factura, Id_M_Pago_Factura
    FROM TablaTemporal;
END //
DELIMITER ;

#TIPO_SERVICIO
DELIMITER //
CREATE PROCEDURE AgregarTipoServicio()
BEGIN
    INSERT INTO TIPO_SERVICIO (ID, Nombre, Descripcion, Estado)
    SELECT ID_T_Servicio, Nombre_T_Servicio, Descripcion_T_Servicio, Estado_T_Servicio
    FROM TablaTemporal;
END //
DELIMITER ;

#CONSULTORIA
DELIMITER //
CREATE PROCEDURE AgregarConsultoria()
BEGIN
    INSERT INTO CONSULTORIA (ID, Id_Factura_id, Id_T_Servicio_id, Estado)
    SELECT ID_Consultoria, Id_Factura_Consultoria, Id_T_Servicio_Consultoria, Estado_Consultoria
    FROM TablaTemporal;
END //
DELIMITER ;

#CONS_EMP
DELIMITER //
CREATE PROCEDURE AgregarConsEmp()
BEGIN
    INSERT INTO CONS_EMP (ID, id_Consultoria_id, id_Empresa_id)
    SELECT ID_CONS_EMP, id_Consultoria_CONS_EMP, id_Empresa_CONS_EMP
    FROM TablaTemporal;
END //
DELIMITER ;

#CONSULTOR
DELIMITER //
CREATE PROCEDURE AgregarConsultor()
BEGIN
    INSERT INTO CONSULTOR (ID, Nombre, Telefono, Correo, Area_Especializacion, ESTADO)
    SELECT ID_Consultor, Nombre_Consultor, Telefono_Consultor, Correo_Consultor, Area_Especializacion_Consultor, ESTADO_Consultor
    FROM TablaTemporal;
END //
DELIMITER ;

#CONSULTORIA-CONSULTOR
DELIMITER //
CREATE PROCEDURE AgregarConsCons()
BEGIN
    INSERT INTO CONS_CONS (ID, Id_Consultoria_id, Id_Consultor_id)
    SELECT ID_CONS_CONS, Id_Consultoria_CONS_CONS, Id_Consultor_CONS_CONS
    FROM TablaTemporal;
END //
DELIMITER ;

# BORRAR TODOS LOS REGISTROS DE LAS TABLAS
DELIMITER //
CREATE PROCEDURE BorrarDatosTablas()
BEGIN
    -- Desactivar verificaci칩n de claves for치neas temporalmente
    SET FOREIGN_KEY_CHECKS = 0;
    DELETE FROM CONS_CONS;
    DELETE FROM CONSULTOR;
    DELETE FROM CONS_EMP;
    DELETE FROM CONSULTORIA;
    DELETE FROM TIPO_SERVICIO;
    DELETE FROM FACTURA;
    DELETE FROM METODO_PAGO;
    DELETE FROM PROYECTO;
    DELETE FROM EMPRESA;
    DELETE FROM GANANCIA;
    SET FOREIGN_KEY_CHECKS = 1;
END //
DELIMITER ;

CREATE INDEX idx_nombre_empresa ON GANANCIA(ID);

DELIMITER //
CREATE PROCEDURE CalcularGanancias()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE factura_id INT;
    DECLARE factura_valor FLOAT;
    DECLARE descuento FLOAT;
    DECLARE total FLOAT;
    DECLARE cur CURSOR FOR SELECT ID, Valor FROM FACTURA;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    SET descuento = 0;
    SET total = 0;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO factura_id, factura_valor;

        IF done THEN
            LEAVE read_loop;
        END IF;

        SET descuento = factura_valor * 0.1;

        SET total = factura_valor - descuento;

        SET @uuid = UUID();
        INSERT INTO GANANCIA (ID, Total, Descuentos, id_Factura_id) VALUES (@uuid, total, descuento, factura_id);
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;


# Ejecuci칩n de todos los procedimientos almacenados
DELIMITER //
CREATE PROCEDURE AgregarDatos()
BEGIN
    CALL AgregarEmpresa();
    CALL AgregarProyecto();
    CALL AgregarMetodoPago();
    CALL AgregarFactura();
    CALL AgregarTipoServicio();
    CALL AgregarConsultoria();
    CALL AgregarConsEmp();
    CALL AgregarConsultor();
    CALL AgregarConsCons();
    CALL CalcularGanancias();

END //
DELIMITER ;
drop procedure CalcularGanancias;
#----------------------------------------- TRIGGERS -----------------------------------------

DELIMITER //
CREATE TRIGGER trigger_empresa BEFORE INSERT ON EMPRESA
FOR EACH ROW
BEGIN
    SET NEW.creado_en = NOW();
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_proyecto BEFORE INSERT ON PROYECTO
FOR EACH ROW
BEGIN
    SET NEW.creado_en = NOW();
    IF NEW.Fecha_Inicio > NEW.Fecha_Finalizacion THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La fecha de inicio debe ser menor a la fecha de finalizaci칩n del proyecto';
    END IF;
END //
DELIMITER ;

#drop TRIGGER trigger_proyecto;

DELIMITER //
CREATE TRIGGER trigger_consultoria BEFORE INSERT ON CONSULTORIA
FOR EACH ROW
BEGIN
    IF NEW.creado_en IS NULL THEN
        SET NEW.creado_en = NOW();
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_factura BEFORE INSERT ON FACTURA
FOR EACH ROW
BEGIN
    IF NEW.aumento IS NULL THEN
        SET NEW.aumento = 0.6;
    END IF;
    SET NEW.Valor = CalcularValorConAumento(NEW.Valor, NEW.aumento);
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_consultor BEFORE INSERT ON CONSULTOR
FOR EACH ROW
BEGIN
    IF NEW.creado_en IS NULL THEN
        SET NEW.creado_en = NOW();
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_consultores BEFORE INSERT ON CONS_EMP
FOR EACH ROW
BEGIN
    IF NEW.creado_en IS NULL THEN
        SET NEW.creado_en = NOW();
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER trigger_consultoria_consultor BEFORE INSERT ON CONS_CONS
FOR EACH ROW
BEGIN
    IF NEW.creado_en IS NULL THEN
        SET NEW.creado_en = NOW();
    END IF;
END //
DELIMITER ;

#drop trigger trigger_consultoria_empresa;
#----------------------------------------- FUNCIONES -----------------------------------------

DELIMITER //
CREATE FUNCTION CalcularValorConAumento(valor_in FLOAT, aumento_in FLOAT) RETURNS FLOAT
DETERMINISTIC
BEGIN
    DECLARE valor_con_aumento FLOAT;
    SET valor_con_aumento = valor_in + (valor_in * aumento_in);
    RETURN valor_con_aumento;
END;
DELIMITER ;
